name: Release to PyPI

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag-version: ${{ steps.get-version.outputs.tag-version }}
    steps:
    - name: ⚙️ Harden Runner
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for hatch-vcs

    - name: ⚙️ Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: ⚙️ Set up Python
      run: uv python install 3.12

    - name: ⚙️ Get version from tag and hatch-vcs
      id: get-version
      run: |
        # Get version from git tag (remove 'v' prefix if present)
        TAG_VERSION="${GITHUB_REF#refs/tags/}"
        TAG_VERSION="${TAG_VERSION#v}"
        echo "tag-version=$TAG_VERSION" >> $GITHUB_OUTPUT
        
        # Get version from hatch-vcs (which uses git tags)
        SOURCE_VERSION=$(uv run python -m hatchling version)
        echo "version=$SOURCE_VERSION" >> $GITHUB_OUTPUT
        
        echo "Tag version: $TAG_VERSION"
        echo "Hatch-VCS version: $SOURCE_VERSION"

    - name: ⚙️ Validate version consistency
      run: |
        if [ "${{ steps.get-version.outputs.version }}" != "${{ steps.get-version.outputs.tag-version }}" ]; then
          echo "❌ Version mismatch!"
          echo "Tag version: ${{ steps.get-version.outputs.tag-version }}"
          echo "Hatch-VCS version: ${{ steps.get-version.outputs.version }}"
          echo "Please ensure the git tag is properly formatted for hatch-vcs."
          exit 1
        fi
        echo "✅ Version validation passed: ${{ steps.get-version.outputs.version }}"

  security-scan:
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
    - name: ⚙️ Harden Runner
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ⚙️ Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: ⚙️ Set up Python
      run: uv python install 3.12

    - name: ⚙️ Install dependencies
      run: uv sync --all-extras --dev

    - name: ⚙️ Run security scan with bandit
      run: |
        uv add --dev bandit[toml]
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run bandit -r src/

    - name: ⚙️ Run dependency vulnerability scan
      run: |
        uv add --dev safety
        uv run safety check --json --output safety-report.json || true
        uv run safety check

  test:
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: ⚙️ Harden Runner
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ⚙️ Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: ⚙️ Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: ⚙️ Install dependencies
      run: uv sync --all-extras --dev

    - name: ⚙️ Run tests
      run: uv run pytest tests/ -v --tb=short
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: ⚙️ Test MCP server startup
      run: |
        timeout 10s uv run python src/main.py || test $? = 124
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [validate-release, security-scan, test]
    environment: 
      name: pypi
      url: https://pypi.org/p/redis-mcp-server
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
      contents: read
      attestations: write  # For build attestations

    steps:
    - name: ⚙️ Harden Runner
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for hatch-vcs

    - name: ⚙️ Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: ⚙️ Set up Python
      run: uv python install 3.12

    - name: ⚙️ Build package
      run: |
        uv build --sdist --wheel

    - name: ⚙️ Check package
      run: |
        uv add --dev twine
        uv run twine check dist/*

    - name: ⚙️ Generate build attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: 'dist/*'

    - name: ⚙️ Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true
        attestations: true

    - name: ⚙️ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ needs.validate-release.outputs.version }}
        path: dist/
        retention-days: 90

  create-github-release-assets:
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]
    permissions:
      contents: write  # For uploading release assets
    steps:
    - name: ⚙️ Harden Runner
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit

    - uses: actions/checkout@v4

    - name: ⚙️ Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ needs.validate-release.outputs.version }}
        path: dist/

    - name: ⚙️ Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.tar.gz
          dist/*.whl
        body: |
          ## 🚀 Redis MCP Server v${{ needs.validate-release.outputs.version }}
          
          This release has been automatically published to PyPI with security scanning and comprehensive testing.
          
          ### Installation
          ```bash
          pip install redis-mcp-server==${{ needs.validate-release.outputs.version }}
          ```
          
          ### Quick Start
          ```bash
          uvx redis-mcp-server --url redis://localhost:6379/0
          ```
          
          ### What's Changed
          See the commit history for detailed changes in this release.
          
          ### Verification
          - ✅ All tests passed across Python 3.10-3.13
          - ✅ Security scan completed
          - ✅ Package built and verified successfully  
          - ✅ Published to PyPI with attestations
          - ✅ Version consistency validated

  notify-success:
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish, create-github-release-assets]
    if: success()
    steps:
    - name: ⚙️ Success notification
      run: |
        echo "🎉 Successfully released Redis MCP Server v${{ needs.validate-release.outputs.version }} to PyPI!"
        echo "📦 Package: https://pypi.org/project/redis-mcp-server/${{ needs.validate-release.outputs.version }}/"
        echo "🏷️ Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
